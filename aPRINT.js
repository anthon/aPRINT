// Generated by CoffeeScript 1.10.0
(function() {
  var A;

  A = function(selector, options) {
    var _baseStyle, _body, _callbacks, _current_draggable, _current_drop_selector, _frame, _pages, _settings, activateContent, addDragDroppable, createIframe, disableNestedImageDrag, fireCallbacks, getHTML, getSortable, init, insertNextTo, insertStyle, makeRemovable, makeSortable, onTrashClick, print, setCallback, setupListeners;
    _frame = null;
    _body = null;
    _pages = null;
    _callbacks = {};
    _current_draggable = null;
    _current_drop_selector = null;
    _baseStyle = '* { -webkit-box-sizing: border-box; -moz-box-sizing: border-box; -ms-box-sizing: border-box; -o-box-sizing: border-box; box-sizing: border-box; margin: 0; padding: 0; outline: none; } html { font-size: 12pt; } body { background: #808080; } body .over { background: #94ff94; } body .removable { position: relative; } body .removable .remove { font-family: sans-serif; background: #fff; position: absolute; top: 6px; right: 6px; padding: 3px 7px; font-size: 1rem; font-weight: 100; color: #000; cursor: pointer; } body .removable .remove:hover { background: #c20000; color: #fff; } body .page { background: #fff; margin: 2mm auto; } body .page.A4 { width: 210mm; height: 297mm; padding: 15mm 20mm; }';
    _settings = {
      stylesheet: null,
      id: 'aPRINT',
      format: 'A4'
    };
    init = function(selector, options) {
      var key, value;
      for (key in options) {
        value = options[key];
        _settings[key] = value;
      }
      createIframe();
      activateContent();
      return setupListeners();
    };
    createIframe = function() {
      _body = document.querySelector(selector);
      _frame = document.createElement('iframe');
      _frame.width = _body.offsetWidth;
      _frame.height = _body.offsetHeight;
      _frame.style.borderWidth = 0;
      _body.parentNode.insertBefore(_frame, _body);
      _frame.contentDocument.body.appendChild(_body);
      insertStyle(_baseStyle);
      if (_settings.stylesheet) {
        return insertStyle(_settings.stylesheet, true);
      }
    };
    insertStyle = function(style, is_link) {
      var styleLink, styleTag;
      if (is_link) {
        styleLink = document.createElement('link');
        styleLink.type = 'text/css';
        styleLink.rel = 'stylesheet';
        styleLink.href = style;
        return _frame.contentDocument.head.appendChild(styleLink);
      } else {
        styleTag = document.createElement('style');
        styleTag.innerHTML = style;
        return _frame.contentDocument.head.appendChild(styleTag);
      }
    };
    activateContent = function() {
      var i, j, len, len1, removable, removables, results, sortable, sortables;
      sortables = _body.querySelectorAll('.sortable');
      removables = _body.querySelectorAll('.removable');
      for (i = 0, len = sortables.length; i < len; i++) {
        sortable = sortables[i];
        disableNestedImageDrag(sortable);
        makeSortable(sortable);
      }
      results = [];
      for (j = 0, len1 = removables.length; j < len1; j++) {
        removable = removables[j];
        results.push(makeRemovable(removable));
      }
      return results;
    };
    setupListeners = function() {
      var drag, drop, ref, results;
      ref = _settings.rules;
      results = [];
      for (drag in ref) {
        drop = ref[drag];
        results.push(addDragDroppable(drag, drop));
      }
      return results;
    };
    addDragDroppable = function(drag, drop) {
      var drag_selector, draggable, draggables, drop_selector, droppable, droppables, i, j, len, len1, replace_on_drop, results;
      drag_selector = drag;
      if (typeof drop === 'string') {
        drop_selector = drop;
      } else if (drop.target) {
        drop_selector = drop.target;
      }
      replace_on_drop = typeof drop.replace === 'boolean' ? drop.replace : false;
      draggables = document.querySelectorAll(drag_selector);
      droppables = _body.querySelectorAll(drop_selector);
      for (i = 0, len = draggables.length; i < len; i++) {
        draggable = draggables[i];
        draggable.draggable = true;
        disableNestedImageDrag(draggable);
        draggable.addEventListener('dragstart', function(e) {
          e.dataTransfer.effectAllowed = 'move';
          _current_draggable = e.srcElement;
          _current_drop_selector = drop_selector;
          draggable.classList.add('drag');
          return false;
        });
        draggable.addEventListener('dragend', function(e) {
          draggable.classList.remove('drag');
          _current_draggable = null;
          return false;
        });
      }
      results = [];
      for (j = 0, len1 = droppables.length; j < len1; j++) {
        droppable = droppables[j];
        droppable.addEventListener('dragover', function(e) {
          if (_current_drop_selector === drop_selector) {
            if (e.preventDefault) {
              e.preventDefault();
            }
            e.dataTransfer.dropEffect = 'move';
            droppable.classList.add('over');
            fireCallbacks('dragover', e);
          } else if (_current_draggable.parentNode === droppable) {
            if (e.preventDefault) {
              e.preventDefault();
            }
            _current_draggable.style.opacity = 0;
            if (e.target === droppable) {
              insertNextTo(_current_draggable, droppable.lastChild);
            } else {
              insertNextTo(_current_draggable, getSortable(e.target, droppable));
            }
            fireCallbacks('dragover', e);
          }
          return false;
        });
        droppable.addEventListener('dragenter', function(e) {
          if (_current_drop_selector === drop_selector) {
            droppable.classList.add('over');
            fireCallbacks('dragenter', e);
          }
          return false;
        });
        droppable.addEventListener('dragleave', function(e) {
          droppable.classList.remove('over');
          return false;
        });
        results.push(droppable.addEventListener('drop', function(e) {
          var clone;
          if (e.stopPropagation) {
            e.stopPropagation();
          }
          if (_current_drop_selector === drop_selector) {
            droppable.classList.remove('over');
            clone = _current_draggable.cloneNode(true);
            makeRemovable(clone);
            if (replace_on_drop) {
              droppable.innerHTML = '';
              droppable.appendChild(clone);
            } else {
              makeSortable(clone);
              if (e.target === droppable) {
                droppable.appendChild(clone);
              } else {
                insertNextTo(clone, getSortable(e.target, droppable));
              }
            }
            fireCallbacks('drop update', e);
          }
          return false;
        }));
      }
      return results;
    };
    disableNestedImageDrag = function(el) {
      var i, image, images_in_draggable, len, results;
      images_in_draggable = el.querySelectorAll('img');
      results = [];
      for (i = 0, len = images_in_draggable.length; i < len; i++) {
        image = images_in_draggable[i];
        image.style['user-drag'] = 'none';
        image.style['-moz-user-select'] = 'none';
        results.push(image.style['-webkit-user-drag'] = 'none');
      }
      return results;
    };
    makeRemovable = function(el) {
      var trasher;
      el.classList.add('removable');
      trasher = el.querySelector('.remove');
      if (!trasher) {
        trasher = document.createElement('div');
        trasher.innerHTML = '&times;';
        trasher.classList.add('remove');
        el.appendChild(trasher);
      }
      return trasher.addEventListener('click', onTrashClick);
    };
    makeSortable = function(el) {
      el.draggable = true;
      el.classList.add('sortable');
      el.addEventListener('dragstart', function(e) {
        e.dataTransfer.dropEffect = 'move';
        e.dataTransfer.effectAllowed = 'move';
        _current_draggable = e.srcElement;
        el.classList.add('drag');
        return false;
      });
      return el.addEventListener('dragend', function(e) {
        el.classList.remove('drag');
        _current_draggable.style.opacity = 1;
        _current_draggable = null;
        return false;
      });
    };
    insertNextTo = function(el, sibling) {
      var el_index, parent, sibling_index, siblings;
      parent = sibling.parentNode;
      if (el.parentNode === parent) {
        siblings = parent.childNodes;
        el_index = Array.prototype.indexOf.call(siblings, el);
        sibling_index = Array.prototype.indexOf.call(siblings, sibling);
        if (el_index > sibling_index) {
          return parent.insertBefore(el, sibling);
        } else {
          return parent.insertBefore(el, sibling.nextSibling);
        }
      } else {
        return parent.insertBefore(el, sibling);
      }
    };
    getSortable = function(el, parent) {
      var el_parent;
      while (true) {
        el_parent = el.parentNode;
        if (el_parent === parent) {
          break;
        }
        el = el_parent;
      }
      console.log(el);
      return el;
    };
    onTrashClick = function(e) {
      var el;
      el = e.target.parentNode;
      el.remove();
      return fireCallbacks('remove update', e);
    };
    setCallback = function(key, callback) {
      if (!_callbacks[key]) {
        _callbacks[key] = [];
      }
      return _callbacks[key].push(callback);
    };
    fireCallbacks = function(key, e) {
      var callback, i, j, k, keys, len, len1, ref;
      keys = key.split(' ');
      for (i = 0, len = keys.length; i < len; i++) {
        k = keys[i];
        if (!_callbacks[k]) {
          return false;
        }
        ref = _callbacks[k];
        for (j = 0, len1 = ref.length; j < len1; j++) {
          callback = ref[j];
          callback(e);
        }
      }
    };
    getHTML = function(page) {
      if (page && typeof page === 'Integer') {
        return _pages[page].outerHTML;
      }
      return _body.outerHTML;
    };
    print = function() {};
    init(selector, options);
    return {
      print: print,
      on: setCallback,
      get: getHTML
    };
  };

  window.aPRINT = function(selector, options) {
    return new A(selector, options);
  };

}).call(this);
